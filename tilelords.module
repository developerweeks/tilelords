/*
  Thank you for having interest in my game
  but you are not allowed to change things here
  please stop now
  - DeveloperWeeks
*/
define('UNWANTED_TAGS', 'span/h1/h2/h3/h4/div/strong');

/*
 * hook_user_insert and hook_node_insert replaced with rules
 * when a village is created, give it a capital
*/

/**
 * Implements hook_entity_info_alter().
   add the display modes for the villages
 */
function tilelords_entity_info_alter(&$entity_info) {
  // when looking at your own village
  $entity_info['node']['view_modes']['village_home'] = array(
    'label' => t('Home'),
    'custom settings' => TRUE,
  );
  // when looking at another user's village
  $entity_info['node']['view_modes']['village_raid'] = array(
    'label' => t('Raid'),
    'custom settings' => TRUE,
  );

}

/*
 Implements hook_preprocess_node()
 set the template overrides for the view modes
*/
function tilelords_preprocess_node( &$variables ){
  if( $variables['view_mode'] == 'village_home' ){
    // looking at own village, have controls
    $variables['theme_hook_suggestions'][] = 'node_village_home';
  }
  if( $variables['view_mode'] == 'village_raid' ){
    // looking at another's village, have attack options
    $variables['theme_hook_suggestions'][] = 'node_village_raid';
  }
}

/*
  Implements hook_field_display_TYPE_alter()
  gets called for every field of the given content type
  do the decompression of data and display processing for the render
*/
function tilelords_field_display_village_alter( &$display, $context ){
  if( $context['view_mode'] == 'village_home' ){
    // check the field being processed
    // maybe load units
    // maybe find the tiles that reference this village
    // maybe unpack the resource stockpile display
  }
  // display is passed by reference, no return needed
}

/* 
 Helper functions below here
*/

/* 
 create a new tile with type $tid
 attach it to village $vig
*/
tilelords_add_tile($vig, $tid){
  $home = node_load($vig);
  if( $home === FALSE ){
    watchdog('Insertion', "Unable to load village ".$vig, array(), WATCHDOG_WARNING);
    return;
  }
  if( $home->type != 'village' ){
    watchdog('Insertion', "Given non-village node ".$home->title."(".$home->nid.") ".$home->type, array(), WATCHDOG_ERROR);
    return;
  }

  $node = new stdClass();
  // tile titles are automatic
  $node->type = "tile";
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
  $node->uid = $home->uid;
  $node->status = 1; //(1 or 0): published or not
  $node->promote = 0; //(1 or 0): promoted to front page
  $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
// set connection to the village
  $node->field_tile_village_ref['und'][0]['value'] = $vig;


  $node = node_submit($node); // Prepare node for saving
  node_save($node);
}

/*
 * helper function for removing html from report contents
 * Strip only selcted tags in THEME_preprocess_node function below
 * strip defined constant tags if none given
 * Growth order of O(n) where n is the number of tags, so defaults to O(7)
 */
function module_strip_only($str, $tags = NULL, $keep = TRUE) {
  if ($tags == NULL) {
    $tags = explode('/', UNWANTED_TAGS);
  }
  if (!is_array($tags)) {
    $tags = (strpos($str, '>') !== false ? explode('>', str_replace('<', '', $tags)) : array($tags));
    if (end($tags) == '') {
      array_pop($tags);
    }
  }
  foreach ($tags as $tag) {
    if( $keep ) {
      $str = preg_replace('#</?' . $tag . '[^>]*>#is', '', $str);
    } else {
      $cleaning = TRUE;
      while( $cleaning ) {
        // regex probably doesnt work here
        $clipFrom = strpos( $str, '<' . $tag );
        $clipTo = strpos( $str, '</' . $tag , $clipFrom );
        $clipTo = strpos( $str, '>' , $clipTo ); // find end of closing tag
        $str = substr($str, 0, $clipFrom) . substr( $str, $clipTo );
        if( substr_count ( $str, '<'. $tag) < 1 ) {
          $cleaning = FALSE;
        }
      }
    }
  }
  return $str;
}
